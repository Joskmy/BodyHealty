package co.edu.uco.bodyhealty.data.dao.sql.postgresql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import co.edu.uco.bodyhealty.crosscutting.exceptions.custom.DataBodyHealtyException;
import co.edu.uco.bodyhealty.crosscutting.exceptions.messagecatalog.MessageCatalogStrategy;
import co.edu.uco.bodyhealty.crosscutting.exceptions.messagecatalog.data.CodigoMensaje;
import co.edu.uco.bodyhealty.data.dao.ServicioDAO;
import co.edu.uco.bodyhealty.data.dao.sql.SqlConnection;
import co.edu.uco.bodyhealty.entity.ServicioEntity;

public final class ServicioPostgreSqlDAO extends SqlConnection implements ServicioDAO {
	public ServicioPostgreSqlDAO(final Connection connection) {
		super(connection);
	}
	
	
	public void crearTablaHola() {
        String sql = "CREATE TABLE IF NOT EXISTS Hola (id SERIAL PRIMARY KEY, columna1 VARCHAR(255), columna2 VARCHAR(255))";

        try (Statement statement = getConnection().createStatement()) {
            statement.executeUpdate(sql);
            System.out.println("La tabla Hola se ha creado correctamente.");
        } catch (SQLException e) {
            String mensajeUsuario = "No ha sido posible crear la tabla Hola. Por favor intente de nuevo y en caso de persistir el problema, comuníquese con el administrador.";
            String mensajeTecnico = "Se ha presentado un problema tratando de crear la tabla Hola en la base de datos PostgreSQL.";

            throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, e);
        }
    }

	@Override
	public final void agregar(final ServicioEntity entidad) {
        

		final var sentenciaSql = new StringBuilder();

		sentenciaSql.append("INSERT INTO servicio(nombreservicio, duracionestimada, descripcion) ");
		sentenciaSql.append("VALUES (?, ?, ?)");



		try (final PreparedStatement sentenciaPreparada = getConnection().prepareStatement(sentenciaSql.toString())) {
			sentenciaPreparada.setString(1, entidad.getNombreServicio());
			sentenciaPreparada.setInt(2, entidad.getDuracionEstimada());
			sentenciaPreparada.setString(3, entidad.getDescripcion());

			sentenciaPreparada.executeUpdate();
		} catch (final SQLException exception) {
			var mensajeUsuario = "No ha sido posible llevar a cabo el registro de la información del nuevo servicio. Por favor intente de nuevo y en caso de persistir el problema, comuníquese con el administrador de BodyHealty...";
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00023);

			throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, exception);
		} catch (final Exception exception) {
			var mensajeUsuario = "No ha sido posible llevar a cabo el registro de la información del nuevo servicio. Por favor intente de nuevo y en caso de persistir el problema, comuníquese con el administrador de BodyHealty...";
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00024);

			throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, exception);
		}
	}

	@Override
	public List<ServicioEntity> consultar(final ServicioEntity entidad) {
		final var listaServicios = new ArrayList<ServicioEntity>();
		final var sentenciaSql = new StringBuilder();

		sentenciaSql.append("SELECT id, nombreservicio, duracionestimada, descripcion ");
		sentenciaSql.append("FROM Servicio ");
		sentenciaSql.append("ORDER BY nombreservicio ASC");

		try (final PreparedStatement sentenciaPreparada = getConnection().prepareStatement(sentenciaSql.toString())) {
			try (final ResultSet resultados = sentenciaPreparada.executeQuery()) {
				while (resultados.next()) {
					ServicioEntity servicioTmp = ServicioEntity.build(resultados.getInt("id"),
							resultados.getString("nombreservicio"), resultados.getInt("duracionestimada"),
							resultados.getString("descripcion"));
					listaServicios.add(servicioTmp);
				}
			} catch (final SQLException exception) {
				var mensajeUsuario = "No ha sido posible llevar a cabo la consulta de la información de los servicios. Por favor intente de nuevo y en caso de persistir el problema, comuníquese con el administrador.";
				var mensajeTecnico = "Se ha presentado un problema ejecutando la sentencia SQL de consulta de los servicios en la base de datos PostgreSQL.";

				throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, exception);
			} catch (final DataBodyHealtyException exception) {
				throw exception;
			}
		} catch (final SQLException exception) {
			var mensajeUsuario = "No ha sido posible llevar a cabo la consulta de la información de los servicios. Por favor intente de nuevo y en caso de persistir el problema, comuníquese con el administrador.";
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00023);

			throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, exception);
		} catch (final Exception exception) {
			var mensajeUsuario = "No ha sido posible llevar a cabo la consulta de la información de los servicios. Por favor intente de nuevo y en caso de persistir el problema, comuníquese con el administrador.";
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00024);

			throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, exception);
		}

		return listaServicios;
	}

}
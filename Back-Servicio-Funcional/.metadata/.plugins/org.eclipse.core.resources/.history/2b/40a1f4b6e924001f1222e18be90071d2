package co.edu.uco.bodyhealty.business.usecase.concrete;

import java.util.List;

import co.edu.uco.bodyhealty.business.assembler.entity.concrete.ServicioEntityDomainAssembler;
import co.edu.uco.bodyhealty.business.domain.ServicioDomain;
import co.edu.uco.bodyhealty.business.usecase.AgregarServicio;
import co.edu.uco.bodyhealty.crosscutting.exceptions.custom.BusinessBodyHealtyException;
import co.edu.uco.bodyhealty.crosscutting.exceptions.messagecatalog.MessageCatalogStrategy;
import co.edu.uco.bodyhealty.crosscutting.exceptions.messagecatalog.data.CodigoMensaje;
import co.edu.uco.bodyhealty.data.dao.factory.DAOFactory;
import co.edu.uco.bodyhealty.data.dao.factory.enums.Factory;
import co.edu.uco.bodyhealty.entity.ServicioEntity;



public class AgregarServicioImpl implements AgregarServicio  {
	
	private final DAOFactory factory;
	
	public AgregarServicioImpl(final DAOFactory factory) {
		this.factory = factory;
	}
	
	@Override
	public void ejecutar(final ServicioDomain servicio) {
		
		
		validarNoExistenciaServicio(servicio.getNombreServicio(), servicio.getDuracionEstimada(), servicio.getDescripcion());
	
		var servicioEntity = ServicioEntityDomainAssembler.obtenerInstancia().ensablarEntidad(servicio);
		factory.getServicioDAO().agregar(servicioEntity);
	
	}
	
	
	
	
	private void validarNoExistenciaServicio(String nombreServicio, int duracion, String descripcion) {
		var servicioEntity = ServicioEntity.build(0, nombreServicio, duracion, descripcion);

		final List<ServicioEntity> resultados = factory.getServicioDAO().consultar(servicioEntity);
		
		if(resultados.isEmpty()) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00043);			
			throw new BusinessBodyHealtyException(mensajeUsuario);
		}

	}
	
	public static void main(String[] args) {
	    DAOFactory factory = DAOFactory.getFactory(Factory.POSTGRESQL);

	    try {
	        System.out.println("Iniciando transacción...");
	        factory.iniciarTransaccion();

	        // Crear un nuevo servicio
	        ServicioEntity nuevoServicio = ServicioEntity.build(0, "Masaje2", 60, "Descripción del nuevo servicio");

	        // Agregar el nuevo servicio
	        factory.getServicioDAO().agregar(nuevoServicio);
	        System.out.println("Nuevo servicio agregado con éxito.");

	        // Consultar los servicios con los criterios del nuevo servicio
	        System.out.println("Consultamos servicios con el mismo nombre, duración y descripción:");
	        var resultados = factory.getServicioDAO().consultar(nuevoServicio);

	        for (ServicioEntity servicioEntity : resultados) {
	            System.out.println("id: " + servicioEntity.getId() + ", nombre: " + servicioEntity.getNombreServicio() + ", duracion: " + servicioEntity.getDuracionEstimada() + ", descrip: " + servicioEntity.getDescripcion());
	        }

	        System.out.println("Confirmando transacción...");
	        factory.confirmarTransaccion();
	    } catch (final Exception excepcion) {
	        excepcion.printStackTrace();
	    } finally {
	        // No cierres la conexión aquí
	        System.out.println("Cerrando conexión...");
	        factory.cerrarConexion();
	    }
	}


    

    
}
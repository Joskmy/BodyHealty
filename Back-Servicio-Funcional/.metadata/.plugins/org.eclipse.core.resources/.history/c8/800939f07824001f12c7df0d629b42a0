package co.edu.uco.bodyhealty.data.dao.factory.sql.postgresql;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import co.edu.uco.bodyhealty.crosscutting.exceptions.custom.DataBodyHealtyException;
import co.edu.uco.bodyhealty.crosscutting.exceptions.messagecatalog.MessageCatalogStrategy;
import co.edu.uco.bodyhealty.crosscutting.exceptions.messagecatalog.data.CodigoMensaje;
import co.edu.uco.bodyhealty.crosscutting.helpers.SQLHelper;
import co.edu.uco.bodyhealty.data.dao.ServicioDAO;
import co.edu.uco.bodyhealty.data.dao.factory.DAOFactory;
import co.edu.uco.bodyhealty.data.dao.factory.enums.Factory;
import co.edu.uco.bodyhealty.data.dao.sql.postgresql.ServicioPostgreSqlDAO;
import co.edu.uco.bodyhealty.entity.ServicioEntity;

public final class PostgresSqlDAOFactory extends DAOFactory {
    private Connection connection;

    public PostgresSqlDAOFactory() {
        obtenerConexion();
    }

    @Override
    protected void obtenerConexion() {
        final String username = "postgres";
        final String password = "chzpmn1001";
        final String connectionUrl = "jdbc:postgresql://localhost/Final";

        try {
            System.out.println("Intentando establecer conexión con la base de datos...");
            connection = DriverManager.getConnection(connectionUrl, username, password);
            if (SQLHelper.isOpen(connection)) {
                System.out.println("Conexión establecida exitosamente con la base de datos PostgreSQL.");
            } else {
                throw new SQLException("Conexión no válida o cerrada después de intentar establecerla.");
            }
        } catch (final SQLException excepcion) {
            var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00002);
            var mensajeTecnico = "Se ha presentado un problema tratando de obtener la conexión con la base de datos PostgreSQL en el servidor. Por favor revise la traza de errores para identificar y solucionar el problema...";
            System.err.println(mensajeTecnico);
            excepcion.printStackTrace();
            throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, excepcion);
        } catch (final Exception excepcion) {
            var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00002);
            var mensajeTecnico = "Se ha presentado un problema INESPERADO tratando de obtener la conexión con la base de datos PostgreSQL en el servidor. Por favor revise la traza de errores para identificar y solucionar el problema...";
            System.err.println(mensajeTecnico);
            excepcion.printStackTrace();
            throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, excepcion);
        }
    }

    @Override
    public void iniciarTransaccion() {
        SQLHelper.initTransaction(connection);
        System.out.println("Transacción iniciada.");
    }

    @Override
    public void confirmarTransaccion() {
        SQLHelper.commit(connection);
        System.out.println("Transacción confirmada.");
    }

    @Override
    public void cancelarTransaccion() {
        SQLHelper.rollback(connection);
        System.out.println("Transacción cancelada.");
    }

    @Override
    public void cerrarConexion() {
        SQLHelper.close(connection);
        System.out.println("Conexión cerrada exitosamente.");
    }

    @Override
    public ServicioDAO getServicioDAO() {
        return new ServicioPostgreSqlDAO(connection);
    }
    
    public static void main(String[] args) {
        DAOFactory factory = DAOFactory.getFactory(Factory.POSTGRESQL);
        
        try {
            System.out.println("Iniciando transacción...");
            factory.iniciarTransaccion();
            
            // Crear un nuevo servicio
            ServicioEntity nuevoServicio = ServicioEntity.build(0, "Nuevo Servicio", 60, "Descripción del nuevo servicio");

            // Agregar el nuevo servicio
            factory.getServicioDAO().agregar(nuevoServicio);
            System.out.println("Nuevo servicio agregado con éxito.");

            System.out.println("Confirmando transacción...");
            factory.confirmarTransaccion();
        } catch (final Exception excepcion) {
            excepcion.printStackTrace();
        } finally {
            // No cierres la conexión aquí
            System.out.println("Cerrando conexión...");
            factory.cerrarConexion();
        }
    }

}

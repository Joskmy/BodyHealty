package co.edu.uco.bodyhealty.data.dao.factory.sql.postgresql;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import co.edu.uco.bodyhealty.crosscutting.exceptions.custom.DataBodyHealtyException;
import co.edu.uco.bodyhealty.crosscutting.exceptions.messagecatalog.MessageCatalogStrategy;
import co.edu.uco.bodyhealty.crosscutting.exceptions.messagecatalog.data.CodigoMensaje;
import co.edu.uco.bodyhealty.crosscutting.helpers.SQLHelper;
import co.edu.uco.bodyhealty.data.dao.ServicioDAO;
import co.edu.uco.bodyhealty.data.dao.factory.DAOFactory;
import co.edu.uco.bodyhealty.data.dao.factory.enums.Factory;
import co.edu.uco.bodyhealty.data.dao.sql.postgresql.ServicioPostgreSqlDAO;
import co.edu.uco.bodyhealty.entity.ServicioEntity;

public final class PostgresSqlDAOFactory extends DAOFactory {
	private Connection connection;

	public PostgresSqlDAOFactory() {
		obtenerConexion();
	}

	@Override
	protected void obtenerConexion() {
		final String connectionUrl = "jdbc:postgresql://localhost/Final?user=postgres&password=chzpmn1001";

		try {
			connection = DriverManager.getConnection(connectionUrl);
		} catch (final SQLException excepcion) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00002);
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00025);

			throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, excepcion);
		} catch (final Exception excepcion) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00002);
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00026);

			throw new DataBodyHealtyException(mensajeTecnico, mensajeUsuario, excepcion);
		}
	}

	@Override
	public void iniciarTransaccion() {
		SQLHelper.initTransaction(connection);
	}

	@Override
	public void confirmarTransaccion() {
		SQLHelper.commit(connection);
	}

	@Override
	public void cancelarTransaccion() {
		SQLHelper.rollback(connection);
	}

	@Override
	public void cerrarConexion() {
		SQLHelper.close(connection);
	}

	@Override
	public ServicioDAO getServicioDAO() {
		return new ServicioPostgreSqlDAO(connection);
	}
	
	
	 public static void main(String[] args) {
	        DAOFactory factory = DAOFactory.getFactory(Factory.POSTGRESQL);
	        
	        try {
	            System.out.println("Iniciando transacción...");
	            factory.iniciarTransaccion();
	            
	            // Crear un nuevo servicio
	            ServicioEntity nuevoServicio = ServicioEntity.build(0, "Masaje2", 60, "Descripción del nuevo servicio");

	            // Agregar el nuevo servicio
	            factory.getServicioDAO().agregar(nuevoServicio);
	            System.out.println("Nuevo servicio agregado con éxito.");
	            
	            System.out.println("Consultamos países: ");
				var resultados = factory.getServicioDAO().consultar(ServicioEntity.build(0));

				for (ServicioEntity paisEntity : resultados) {
					System.out.println("id: " + paisEntity.getId() + ", nombre: " + paisEntity.getNombreServicio() + ", duracion: " + paisEntity.getDuracionEstimada() + ", descrip: " + paisEntity.getDescripcion());
				}

	            System.out.println("Confirmando transacción...");
	            factory.confirmarTransaccion();
	        } catch (final Exception excepcion) {
	            excepcion.printStackTrace();
	        } finally {
	            // No cierres la conexión aquí
	            System.out.println("Cerrando conexión...");
	            factory.cerrarConexion();
	        }
	    }
	    

}
